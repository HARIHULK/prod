{"version":3,"sources":["Productdetails.js","App.js","serviceWorker.js","index.js"],"names":["productdetails","props","info","data","products","location","id","console","log","name","Highlights","className","src","img","alt","style","width","price","class","map","element","specifications","Home","product","index","key","to","pathname","App","exact","path","component","Productdetails","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mQASe,SAASA,EAAeC,GAG/B,IAAIC,EAAKC,EAAKC,SAASH,EAAMI,SAASF,KAAKG,IAI/C,OAHIC,QAAQC,IAAIN,EAAKO,MACjBF,QAAQC,IAAIN,EAAKQ,YAGhB,yBAAKC,UAAU,8BACZ,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,eACX,yBAAKA,UAAU,yBACX,yBAAKC,IAAKV,EAAKW,IAAKC,IAAI,eAAeC,MAAO,CAACC,MAAM,SACrD,4BAAKd,EAAKO,MACV,wBAAIE,UAAU,kBAAkBT,EAAKe,UAQjD,yBAAKN,UAAU,gBACX,yBAAKA,UAAU,eACX,yBAAKA,UAAU,aACX,gDACA,6BACA,0CACA,wBAAIO,MAAM,cAELhB,EAAKQ,WAAWS,KAAI,SAAAC,GAAO,OACxB,wBAAIF,MAAM,mBAAoBE,OAGtC,8CACA,wBAAIF,MAAM,cAELhB,EAAKmB,eAAeF,KAAI,SAAAC,GAAO,OAC5B,wBAAIF,MAAM,mBAAoBE,WC9B9D,IAAIE,EAAK,WACP,IAAIlB,EAASD,EAAKC,SAClB,OACE,yBAAKO,UAAU,8BACVP,EAASe,KAAI,SAACI,EAAQC,GAAT,OACZ,yBAAKb,UAAU,mCAAmCc,IAAKD,GACvD,yBAAKb,UAAU,QACb,yBAAKA,UAAU,yBACb,yBAAKC,IAAKW,EAAQV,IAAKC,IAAI,cAAcC,MAAO,CAACC,MAAM,SACvD,4BAAKO,EAAQd,MACb,wBAAIE,UAAU,kBAAkBY,EAAQN,OACxC,kBAAC,IAAD,CAAMS,GAAI,CAACC,SAAS,kBAAkBxB,KAAK,CAACG,GAAGkB,IAASb,UAAU,mBAAlE,+BASCiB,EA/Bf,WACE,OACC,kBAAC,IAAD,KACG,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,YAAYC,UAAWT,IACzC,kBAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,kBAAkBC,UAAWC,MCEjCC,QACW,cAA7BC,OAAO7B,SAAS8B,UAEe,UAA7BD,OAAO7B,SAAS8B,UAEhBD,OAAO7B,SAAS8B,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,a","file":"static/js/main.04d099ed.chunk.js","sourcesContent":["import React from 'react';\r\nimport data from './data/data.json';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default function productdetails(props) {\r\n\r\n\r\n        let info=data.products[props.location.data.id]\r\n        console.log(info.name)\r\n        console.log(info.Highlights);\r\n\r\n    return (\r\n         <div className=\"row justify-content-center\">\r\n            <div className=\"col-lg-3 m-2\">\r\n                <div className=\"card shadow\">\r\n                    <div className=\"card-body text-center\">\r\n                        <img src={info.img} alt=\"profile Icon\" style={{width:\"30%\"}}/>\r\n                        <h4>{info.name}</h4>\r\n                        <h4 className=\"text-secondary\">{info.price}</h4>\r\n                      \r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* details part*/ }\r\n\r\n            <div className=\"col-lg-8 m-2\">\r\n                <div className=\"card shadow\" >\r\n                    <div className=\"card-body\">\r\n                        <h2>Product details:</h2>\r\n                        <hr />\r\n                        <h2>Highlights</h2>\r\n                        <ul class=\"list-group\">\r\n                            \r\n                            {info.Highlights.map(element => (\r\n                                <l1 class=\"list-group-item\" >{element}</l1>\r\n                            ))}\r\n                        </ul>\r\n                        <h2>Specifications</h2>\r\n                        <ul class=\"list-group\">\r\n                            \r\n                            {info.specifications.map(element => (\r\n                                <li class=\"list-group-item\" >{element}</li>\r\n                            ))}\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport './App.css';\nimport data from './data/data.json';\nimport {BrowserRouter,Route,Link} from 'react-router-dom';\nimport Productdetails from './Productdetails';\n\nfunction App() {\n  return (\n   <BrowserRouter>\n      <Route exact path='/products' component={Home} />\n      <Route exact path='/productdetails' component={Productdetails} />\n   </BrowserRouter>\n  );\n}\n\n// Home\n\nlet Home=() =>{\n  let products=data.products;\n  return(\n    <div className=\"row justify-content-center\">\n        {products.map((product,index)=>(\n          <div className=\"col-lg-4 col-md-4 col-sm-10 mt-1\" key={index}>\n          <div className=\"card\">\n            <div className=\"card-body text-center\">\n              <img src={product.img} alt=\"product Img\" style={{width:\"30%\"}}/>\n              <h2>{product.name}</h2>\n              <h4 className=\"text-secondary\">{product.price}</h4>\n              <Link to={{pathname:'/productdetails',data:{id:index}}} className=\"btn btn-primary\">View Specifications</Link>\n            </div>\n          </div>\n        </div>\n        ))}\n    </div>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}